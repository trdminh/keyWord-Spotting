/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.06.2025 09:25:14

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 5936;
#else
constexpr int kTensorArenaSize = 4912;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045765124261379242, } };
const TfArray<1, int> quant0_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 32, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 32, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 13, 16, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 13, 1, 8, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data7[2] = { -1, 56, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[5] = { -1061, 62, 614, 224, 41, };
const TfArray<1, int> tensor_dimension8 = { 1, { 5 } };
const TfArray<1, float> quant8_scale = { 1, { 0.00091223197523504496, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[5*56] = { 
  5, -58, 36, 8, 17, 4, -15, -32, 31, -42, 47, -3, 12, 15, -11, -27, 19, -44, 13, 1, 17, 14, -8, -27, 13, -30, 13, 9, 6, 15, -11, -11, 12, -41, 21, 18, 7, 10, -13, -26, 21, -26, 19, 8, -6, 5, -3, -41, 26, -19, 20, -2, 5, 18, -21, -26, 
  -127, -4, -96, -65, -83, -84, -70, 8, -57, 34, -87, 8, -21, -54, -65, -9, -1, 29, -52, 19, 0, -56, -18, -19, 18, 17, 3, 24, -1, -33, -57, -12, 17, 5, -17, 19, -6, -26, -77, -20, 10, -67, -6, -22, -30, -9, -45, -3, -8, -17, -7, -27, 14, -51, -90, 6, 
  -12, -17, 5, -1, -3, 19, 2, 25, 0, 0, 13, -38, -14, 18, 15, 8, -13, -24, -5, -10, -27, 21, 13, 6, -27, -14, 8, -10, -35, 21, 23, 6, -19, -5, -1, -6, -38, 24, 16, -7, -4, 18, 0, -4, -37, 19, 20, -4, 0, 13, -18, 8, -10, 14, 34, 23, 
  9, -21, 3, -33, 5, -46, 12, -39, 36, 16, -6, -31, 4, -31, 27, -49, 26, 8, -9, -33, 18, -14, 34, -19, 19, -7, 1, -23, 12, -15, 20, -9, 16, -11, -12, -17, 5, 5, 10, -20, 21, -27, 3, -32, -3, 1, 2, -46, 16, -27, -23, -25, 11, 0, 9, -17, 
  -42, -10, 0, -26, 20, 11, -4, 25, -5, 14, 28, -26, 9, 3, -17, 14, -18, 12, 19, -13, 25, 4, -10, 11, -22, 12, 11, 1, 10, -7, -10, 13, -37, 6, 8, 4, -1, -9, -13, 8, -28, 24, 12, -9, -12, -7, 0, 8, -36, 8, 10, 6, 6, 5, -22, 24, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 5,56 } };
const TfArray<1, float> quant9_scale = { 1, { 0.013024026528000832, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[8] = { 396, -3, -22, -913, -1639, -4, 639, -58, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00071695668157190084, 0.00037822054582647979, 0.00074338639387860894, 0.00048820159281603992, 0.00045127372140996158, 0.00068056734744459391, 0.00068407744402065873, 0.00055647135013714433, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[8*1*3*16] = { 
  /* [0][0][][] */ 11,15,-32,-3,-24,34,-124,31,-44,-127,41,17,2,-17,-9,14, -49,-51,-48,31,-24,2,-40,35,-30,-86,34,15,-43,36,-10,23, -112,-37,-4,11,-18,-72,-125,22,-76,-90,27,5,-54,-9,-7,0, 
  /* [1][0][][] */ 56,-52,20,-44,-40,-29,86,-110,1,-8,-36,-12,82,-54,5,-10, 105,-21,-84,-30,-55,-29,-33,-68,-5,47,56,9,124,-85,12,22, 22,12,-115,-65,-98,48,107,-13,-34,-52,-26,-18,127,-73,-52,44, 
  /* [2][0][][] */ -92,-20,1,40,2,9,-72,-7,34,-114,-47,-57,-127,30,-40,-76, 4,14,-13,23,-6,24,-83,-22,47,-58,-19,-112,-73,64,-26,-42, -4,-8,-16,53,-1,17,-11,34,51,45,-7,8,-35,17,-8,4, 
  /* [3][0][][] */ -33,-16,-66,56,-32,77,19,5,20,-78,-9,-93,117,76,-24,4, 0,-71,-15,-37,-54,93,21,49,26,-64,-8,-88,84,17,-30,6, 21,-13,15,79,-15,103,-93,-4,-23,-127,-7,-46,41,-14,-5,-23, 
  /* [4][0][][] */ -5,-35,-1,-6,-11,-22,16,23,40,36,26,58,-127,17,-43,35, 38,29,-21,28,2,-25,5,32,-2,3,18,23,-103,41,-40,30, 44,-60,12,74,-18,-33,14,1,39,10,-5,58,-66,27,-38,2, 
  /* [5][0][][] */ -97,6,-5,18,34,-12,-48,35,14,0,-22,-72,-30,9,23,-107, -90,-5,-14,2,-3,15,-35,10,35,19,-41,-63,21,45,10,-46, -127,55,-23,13,20,17,-120,18,7,-16,-13,-81,-47,34,21,-42, 
  /* [6][0][][] */ -42,-23,-67,-37,13,-103,-43,-45,-46,-45,41,-99,-9,-65,-2,3, -42,24,-127,-74,-30,-45,-66,-61,-85,1,30,-94,-24,-49,28,31, -91,-25,-44,-27,4,-75,-78,-11,-34,-52,56,-38,-75,-30,-4,-16, 
  /* [7][0][][] */ 45,49,20,-12,13,-83,27,-110,33,89,-127,-29,-49,-64,13,-35, -6,-39,5,-25,13,-69,25,-49,26,16,-33,-9,-57,-37,11,-49, 37,-6,38,-17,16,-82,18,-85,12,59,-82,7,-42,1,-7,-35, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,16 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0082005886361002922, 0.0043261065147817135, 0.0085028931498527527, 0.0055840755812823772, 0.0051616928540170193, 0.007784365676343441, 0.0078245140612125397, 0.0063649490475654602, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[16] = { 74, -1438, 1416, -62, -1256, -770, 756, -858, -989, 1098, -1605, -1618, 35, -828, -565, -1293, };
const TfArray<1, int> tensor_dimension12 = { 1, { 16 } };
const TfArray<16, float> quant12_scale = { 16, { 0.00053206534357741475, 0.00027455625240691006, 0.00069346238160505891, 0.00061123538762331009, 0.00061848899349570274, 0.00060207152273505926, 0.00051362504018470645, 0.00045310755376704037, 0.00045919258263893425, 0.0005180977750569582, 0.00053089502034708858, 0.00043658731738105416, 0.00063860689988359809, 0.00053122983081266284, 0.00059498491464182734, 0.00061186880338937044, } };
const TfArray<16, int> quant12_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[16*1*3*32] = { 
  /* [0][0][][] */ 40,-54,68,-58,-68,-31,-90,31,-34,-53,-82,-90,-54,-25,-11,36,-75,8,3,33,-70,-67,-13,34,43,-69,3,7,-10,4,-11,-19, -4,-76,30,-51,-80,33,-62,-13,4,-16,-43,-54,-60,-14,-35,19,-50,-18,-86,-9,-34,6,-74,-18,19,-48,-5,-24,-41,-5,-46,13, 74,-69,2,11,-29,2,-65,-16,33,-12,1,-25,-74,-13,18,47,-127,-48,10,31,-61,-23,-19,11,41,0,13,-57,45,61,-63,37, 
  /* [1][0][][] */ -16,-22,-35,15,-29,-66,-7,84,-70,-5,-41,-21,17,-35,-18,42,10,7,-1,-47,-35,-61,-55,-46,-37,-72,-33,-23,-39,-76,17,-31, -55,-44,-44,10,-54,-35,12,-78,-31,1,4,-127,25,31,-50,-82,-74,-20,-17,-96,52,50,-41,-61,-10,-60,-83,-20,21,-61,30,-55, -67,-90,-14,-20,-26,-19,-61,-89,-53,36,-31,-36,-66,-52,-5,0,-30,-17,22,-39,-53,20,-10,-20,32,-59,-17,31,-47,-3,-78,8, 
  /* [2][0][][] */ 0,-79,-46,6,3,24,-31,-127,9,-71,1,-14,-13,6,17,-75,-65,8,-53,-111,19,3,0,-69,-28,-13,-73,35,-30,-92,1,-85, 16,-89,-34,-10,-6,15,-6,-97,-1,2,18,-3,4,0,9,-57,7,26,-65,-44,25,8,-11,-88,-35,24,11,9,18,-88,21,-48, -8,-86,-56,4,-4,20,-12,-115,-14,-52,-59,-4,-8,-3,-25,-56,-42,33,-70,-66,14,-33,-21,-109,-26,-22,18,-6,-23,-102,12,-6, 
  /* [3][0][][] */ -84,-33,-37,-76,14,-38,4,-12,-4,-63,0,4,-13,-13,-63,-67,-54,13,-73,-115,18,29,2,35,-21,-81,-46,1,-59,-80,-19,-84, -79,12,-1,-54,-9,-20,-18,21,-54,25,10,-7,-14,-77,-55,-61,-74,20,64,-20,24,28,-8,-5,-67,-74,28,3,-55,15,-24,-65, -32,9,28,-105,-1,-36,1,25,-59,23,-31,-6,10,-127,-78,5,6,26,27,3,12,45,-38,0,-40,-112,45,29,-104,32,-31,-40, 
  /* [4][0][][] */ -22,23,-14,-45,-20,7,17,-36,-12,25,-15,0,35,1,1,-40,16,17,-36,-22,7,50,6,-78,-76,-5,0,21,-15,-78,27,-64, -5,7,-11,0,-9,18,-8,-30,-14,-8,4,6,59,-6,-6,-4,-20,5,-2,-6,2,42,2,-127,-24,7,33,13,14,-64,21,-33, -14,8,9,22,-19,11,10,-51,-10,15,-8,10,25,-9,-24,20,-30,33,10,-30,11,51,23,-83,-8,5,42,-21,23,-37,13,-21, 
  /* [5][0][][] */ -3,-10,67,-61,-33,-67,-28,8,-79,9,1,-40,13,-110,-93,-82,-26,-60,45,-13,-23,8,-59,3,-54,-77,22,31,-27,15,-83,-63, 5,-20,1,-74,-56,23,5,28,-23,35,-80,-30,2,-82,-24,-14,-3,8,16,-1,-79,55,-9,25,-71,3,-44,14,-25,-4,20,-34, 13,18,-38,-26,-44,27,6,10,13,24,-127,-2,-16,-66,16,13,19,0,-20,6,-73,-45,-40,-8,-21,52,-69,24,-48,-35,43,-24, 
  /* [6][0][][] */ 39,-56,7,-4,12,-91,-70,37,-6,-77,2,-81,-85,-53,40,22,-39,-55,12,42,-47,-67,-8,10,2,-29,62,-123,0,-2,-74,25, 36,-108,10,1,15,-27,-73,-24,43,-127,10,-58,-94,-55,11,49,-20,-88,11,23,-22,3,-33,-2,1,-12,48,-52,15,18,49,20, 29,-120,88,64,-14,-106,-72,-1,34,-110,14,-31,-98,-38,-22,11,-53,-100,-22,30,-55,10,-67,8,29,10,39,30,9,36,-63,35, 
  /* [7][0][][] */ 4,-1,23,-14,-45,-3,10,4,-11,26,-5,-6,32,-33,-127,-33,9,-21,65,-48,34,19,-15,2,-53,63,-23,2,-43,-11,-25,-81, -26,16,20,21,-87,1,18,-28,-114,31,-18,3,39,-112,-96,-79,12,-47,33,-19,-10,30,34,12,-49,4,37,13,-44,21,-121,-57, -51,35,-49,-20,-115,1,-1,57,-79,1,-97,-79,40,-101,-52,4,28,35,1,1,-42,-64,42,25,-41,40,-43,-13,-58,-4,71,-47, 
  /* [8][0][][] */ 1,-35,31,23,17,-49,-23,2,-69,-49,19,-3,-56,-66,-110,-22,-127,-16,8,23,44,39,-55,-24,-7,-14,54,-33,-29,18,18,-38, -5,-8,19,-20,-10,-96,-101,26,-44,-19,-39,-29,17,-47,-101,12,-4,-47,49,-8,-27,24,-61,-21,54,-46,17,-31,27,28,-54,-18, 23,-18,-54,10,-45,-45,21,55,-53,-48,-3,-42,5,-20,-26,11,-1,10,-61,78,-50,37,-52,52,-20,-54,50,-36,42,21,49,14, 
  /* [9][0][][] */ 24,-86,23,11,39,-94,-34,29,-32,-101,-2,-32,-87,-56,-27,26,-48,-72,-44,53,-77,-37,-50,8,8,-14,-9,-84,21,36,-27,53, 2,-119,7,-22,38,-34,-32,-34,-5,-91,32,-16,-18,-27,-19,8,-66,-95,-127,12,-82,-80,-81,-5,37,-27,57,-83,52,-7,-8,14, 21,-77,-29,37,-18,-44,-17,-9,9,-56,49,-6,-68,-8,11,17,-49,-74,21,36,-92,-35,-36,12,17,-1,48,-113,-8,36,-45,37, 
  /* [10][0][][] */ -8,29,-62,-50,-10,-73,-1,33,33,21,-73,10,-44,-55,55,-17,26,-20,-71,31,-66,44,-88,10,13,-21,-89,12,-24,-18,32,32, -2,25,-21,-35,-127,-29,1,40,-34,36,-58,-66,-19,-30,-10,0,33,6,-89,6,-8,-16,-127,-28,-84,-117,-43,16,-67,-2,-12,17, -14,-30,-18,8,-77,-46,-19,29,-7,-9,7,10,-4,-6,-38,-15,33,31,-17,-9,3,-43,-74,-36,-120,-51,-45,62,-27,-59,-51,4, 
  /* [11][0][][] */ 4,-33,8,51,-30,-17,-113,8,-17,-51,36,-81,-31,35,-3,-21,3,-82,46,-5,-35,-10,-7,88,5,78,-13,-120,26,58,-20,52, 24,-42,-5,13,-77,-33,-114,-20,-35,-91,5,-53,-58,54,-2,-12,-111,-13,18,1,57,-82,1,14,47,-24,24,-106,12,6,-12,-11, 19,-127,-26,25,-81,-2,-88,26,-21,-96,16,-63,-20,-9,14,-2,-50,-5,-11,11,52,-10,-3,-3,9,20,24,-45,-2,45,-1,32, 
  /* [12][0][][] */ 16,7,-61,-78,29,-33,-32,-32,-4,-36,66,-36,17,-72,27,6,22,-35,9,-53,-47,-26,20,-16,-17,-35,-85,-22,-127,-48,-64,-5, 23,-31,12,-36,-103,-28,-7,8,16,-78,-23,2,12,-57,-1,13,-16,-75,19,-64,-40,2,6,6,-89,-10,-57,1,-15,-41,-76,-2, 31,-91,75,-32,-80,-118,-8,16,21,-50,-11,-75,-51,-63,-9,-6,-8,-72,-40,-27,-27,52,-16,13,6,-14,-51,62,6,-41,-33,-2, 
  /* [13][0][][] */ -27,2,56,15,-99,3,-81,-21,-88,18,-42,-16,-45,-7,-69,-118,-24,-33,55,26,1,36,-51,10,-32,-48,28,-16,-31,12,-10,-60, -27,-2,-14,-52,-51,-22,7,45,-111,-76,-47,-55,60,-30,-46,-26,-7,12,15,35,-83,-18,-14,-4,-70,-12,-31,-25,-12,-22,37,-83, 2,-47,-48,-40,-30,11,10,11,-70,-32,-69,-5,30,6,-89,42,8,8,-1,26,-101,23,-66,-21,-127,2,-40,2,-6,-36,75,-42, 
  /* [14][0][][] */ -19,57,5,15,-3,-1,2,-39,-10,17,10,-8,37,-19,38,-3,-5,-9,6,-12,-7,15,-7,-107,22,-2,1,1,13,-65,21,-54, 1,37,17,5,-21,-10,-3,-29,-29,12,-1,-18,16,-10,-4,9,9,5,0,8,-12,30,6,-109,-9,-12,19,-3,21,-99,-22,-32, -26,1,31,36,-13,-20,23,-26,-23,-10,-11,8,62,-1,-6,-5,31,-5,-5,-23,-7,-4,6,-127,0,10,-17,8,77,-119,30,-40, 
  /* [15][0][][] */ -10,17,-46,21,-4,-8,7,18,38,13,9,-7,-18,-5,35,-1,-20,-103,-8,4,-78,11,-14,31,-11,23,-56,-20,-22,8,-17,15, 4,6,5,-20,-86,-76,-60,26,9,12,-29,-103,-33,2,23,12,17,16,5,16,-18,-30,-3,16,-7,18,-21,10,-26,0,-9,21, 18,-58,-4,-45,-127,-14,-11,17,-19,-14,-47,-58,-53,13,14,16,16,12,25,-6,18,-33,11,-18,-25,16,-19,26,-14,15,-34,15, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 16,1,3,32 } };
const TfArray<16, float> quant13_scale = { 16, { 0.0095057962462306023, 0.0049051791429519653, 0.012389291077852249, 0.010920236818492413, 0.011049828492105007, 0.010756515897810459, 0.0091763455420732498, 0.0080951489508152008, 0.0082038631662726402, 0.0092562539502978325, 0.0094848880544304848, 0.007800001185387373, 0.011409251019358635, 0.0094908690080046654, 0.010629908181726933, 0.010931552387773991, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[32] = { -5863, -326, -8711, -3486, 816, -687, -915, -9720, -2083, -864, -4395, 819, -909, -776, -3226, -5557, -788, -1189, -6562, -7590, -1265, -3095, -1208, -9223, -4809, -5155, -7075, -1721, -2751, -12197, -2076, -10070, };
const TfArray<1, int> tensor_dimension14 = { 1, { 32 } };
const TfArray<32, float> quant14_scale = { 32, { 0.00026220217114314437, 0.00072174292290583253, 0.00022976532636675984, 0.00039112003287300467, 0.00038305734051391482, 0.00054957548854872584, 0.00043490287498570979, 0.00019877655722666532, 0.00031335378298535943, 0.00058790290495380759, 0.00022314174566417933, 0.00031154652242548764, 0.0005537340184673667, 0.00051715568406507373, 0.00047663846635259688, 0.00022540325880981982, 0.00069122127024456859, 0.00052932067774236202, 0.00023824458185117692, 0.00020859563664998859, 0.00053125951671972871, 0.00035590949119068682, 0.00040063937194645405, 0.0001868997496785596, 0.00025521038332954049, 0.00020588030747603625, 0.00025030219694599509, 0.00048915145453065634, 0.0003978708409704268, 0.00016922848590184003, 0.00050769728841260076, 0.00018932927923742682, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[32*1*3*13] = { 
  /* [0][0][][] */ 5,55,-58,21,-51,25,18,-18,-8,31,-91,23,12, -15,18,-7,-68,37,-38,24,-53,127,-36,-7,-21,34, 7,55,-7,-15,-57,-17,33,-17,70,30,-45,23,-11, 
  /* [1][0][][] */ -127,1,-10,-9,-3,-1,5,-5,7,5,-6,-7,-4, 97,18,8,2,0,0,-5,1,6,-4,8,14,-4, 22,-21,2,-1,0,6,-3,1,-3,4,4,-4,4, 
  /* [2][0][][] */ -48,44,52,35,-31,-54,-45,29,4,86,18,30,46, -43,22,52,-38,1,-50,1,30,127,-13,33,-77,-21, 14,41,72,2,-34,-50,31,-29,23,-8,-114,-93,0, 
  /* [3][0][][] */ -18,52,-11,-21,127,20,-15,9,44,-1,-22,5,18, -23,13,14,21,63,-30,28,32,3,38,-25,27,-27, -3,-48,5,51,26,-13,47,12,31,1,4,24,-7, 
  /* [4][0][][] */ 8,-30,-17,-36,27,-1,-44,65,-13,34,36,-45,12, -41,-127,15,-44,-31,13,-17,-17,-58,-53,-40,8,-35, 15,-125,26,17,-23,-5,-15,-31,25,41,-43,33,-53, 
  /* [5][0][][] */ -127,26,11,-23,-16,-23,9,-18,1,-30,-6,11,23, -50,17,-15,-25,3,25,44,-22,-22,-10,3,-2,20, -36,-27,-45,12,47,9,-20,2,-1,-26,3,-12,-23, 
  /* [6][0][][] */ 54,38,8,-52,-8,-12,38,30,-46,-21,-53,-41,-27, -127,-53,-65,-23,10,37,7,-4,47,5,1,26,35, -9,-23,45,74,-7,-37,-28,-28,3,3,-10,5,-15, 
  /* [7][0][][] */ 22,106,127,-18,-50,-3,6,61,-34,-46,-90,40,41, 9,-52,37,26,-61,21,16,60,-59,-12,-8,82,15, -61,12,7,4,-22,11,56,-12,-59,7,-40,44,10, 
  /* [8][0][][] */ -105,-127,-66,-46,-19,23,27,-43,-59,-17,91,-48,16, 1,-80,-15,-55,-22,35,-49,-40,-4,-30,4,33,-9, 64,-44,-33,-43,-98,18,1,5,-28,-15,32,51,29, 
  /* [9][0][][] */ -102,54,8,-15,-16,-28,-5,-9,8,-16,10,-2,-5, -46,-21,-5,-22,-9,13,10,6,-2,3,-8,6,16, 127,-16,-11,11,11,6,-5,9,11,9,3,6,2, 
  /* [10][0][][] */ 8,-66,121,34,-63,-37,73,-92,-45,-5,54,-67,-26, 5,-110,87,80,-45,33,54,12,10,-36,78,-27,-38, -54,3,-16,127,116,79,-37,4,15,56,98,-2,-19, 
  /* [11][0][][] */ -81,-9,-73,-48,82,61,43,80,18,4,-4,-29,5, -47,37,53,5,-92,-115,-66,-66,-12,39,34,0,30, 2,-127,-63,7,11,45,56,38,21,-20,-13,9,-7, 
  /* [12][0][][] */ -53,-44,3,-12,-31,-20,17,16,-2,6,2,-9,-5, 124,28,-11,-11,58,13,-6,-8,-10,11,-10,-3,6, -127,11,-8,14,-30,14,3,-9,-6,-1,-3,-7,1, 
  /* [13][0][][] */ -34,-20,22,-19,36,-29,-20,-34,24,10,-11,-12,6, -39,-29,-6,13,-3,-55,31,-12,30,8,1,-31,24, -127,-42,-61,-34,22,-32,-37,-5,8,-23,23,-27,10, 
  /* [14][0][][] */ -30,-127,3,37,12,3,-22,-1,-35,-41,7,6,2, -12,-42,17,-17,-6,24,-48,12,-47,-56,13,16,8, 41,33,12,-38,-17,28,-33,-26,-32,-34,25,29,14, 
  /* [15][0][][] */ -61,70,-108,-80,42,-15,16,-64,-28,-51,-6,45,-99, -34,103,-11,-92,15,58,26,-52,-6,-85,61,27,-51, 43,127,-58,-10,-49,31,29,86,-36,11,29,29,12, 
  /* [16][0][][] */ 65,14,7,-33,6,5,-10,-3,-10,-7,6,-2,3, 46,-9,9,6,24,14,-22,11,2,-1,9,-2,7, -127,-32,-21,-5,-32,-23,14,-9,13,3,-10,-8,1, 
  /* [17][0][][] */ -5,5,2,-27,3,18,-31,28,-22,-6,-17,9,3, -111,33,-14,4,3,7,15,-2,-11,7,10,18,-8, -127,44,-7,-4,-13,18,12,-7,1,-17,1,2,-2, 
  /* [18][0][][] */ -75,40,87,102,127,41,-19,-26,101,-4,61,-65,9, 51,55,-56,-16,48,-44,-40,-31,59,-72,-30,-118,-12, -39,-52,-54,-84,-29,-71,-31,-72,-124,-2,-100,47,44, 
  /* [19][0][][] */ 48,127,1,-8,53,-11,43,-8,-29,-12,-69,121,11, 13,41,43,24,28,-64,82,-42,-44,-38,18,29,-37, 21,81,-22,24,9,-28,42,105,-62,37,96,5,36, 
  /* [20][0][][] */ -35,-35,-40,-27,-14,-16,-30,24,-11,-5,35,13,-7, -76,33,14,6,-16,12,-11,-3,4,-2,-2,20,-13, -127,47,25,-3,4,16,-9,8,14,25,53,32,19, 
  /* [21][0][][] */ -41,-127,-61,-16,20,80,10,-12,37,-27,1,-11,-2, -78,103,60,29,-67,-21,-6,-6,-11,25,-34,-14,28, 14,48,10,-27,-6,-36,-1,50,27,21,-40,5,-25, 
  /* [22][0][][] */ -36,-56,-26,18,33,13,4,-8,2,5,8,-35,-21, 74,45,24,26,73,24,-42,-38,5,-25,-1,4,-7, -127,-18,-19,-64,-67,7,-21,-26,6,28,39,9,28, 
  /* [23][0][][] */ -32,-64,59,81,38,0,35,-20,1,37,-90,69,-79, -25,44,74,41,-40,-10,-35,33,-55,23,-80,118,-110, 84,127,-32,114,-45,37,-41,0,-28,40,-55,55,-54, 
  /* [24][0][][] */ 19,-86,-17,-30,-43,48,-27,1,-70,54,-70,14,77, 9,-118,10,-58,127,2,-10,-95,68,31,-100,-23,74, 27,-105,-27,-32,52,43,67,37,13,52,-78,41,50, 
  /* [25][0][][] */ -85,78,-101,90,67,-22,58,-127,38,-104,8,-54,-96, -36,-87,-34,8,62,55,-93,-113,30,11,-9,-99,-30, -14,-97,-4,-18,109,-8,-108,-88,31,65,-7,-54,-43, 
  /* [26][0][][] */ -72,127,-64,98,-40,-13,-36,79,13,34,57,-55,8, 28,10,-22,-18,95,-65,57,-34,49,-19,59,-95,24, 37,11,-68,27,-64,35,-38,88,-66,83,-66,5,60, 
  /* [27][0][][] */ -127,-29,27,13,-46,-37,-17,-22,3,-12,3,-13,22, -78,-20,37,-13,-30,-34,-2,-2,-8,9,-14,-12,2, 21,0,9,-5,-13,2,28,36,-6,-23,-20,6,14, 
  /* [28][0][][] */ 55,66,35,20,-127,5,-2,-104,38,24,-27,-17,-24, -53,-19,-12,-53,68,-25,-39,-38,25,9,34,6,-15, -18,-66,22,-3,28,-29,-11,32,-14,-6,49,9,-36, 
  /* [29][0][][] */ 81,61,3,24,103,-21,16,-84,114,-30,53,-73,43, 55,101,50,39,60,-38,61,-50,56,-73,47,-57,36, 66,127,-11,34,33,13,-49,82,-38,31,-89,29,-9, 
  /* [30][0][][] */ -13,7,-32,15,-24,8,48,-46,-10,-8,-31,5,7, -127,22,-18,0,66,6,3,23,-2,-29,19,-21,8, -69,-6,24,-23,-21,-10,17,35,-4,-29,7,1,-9, 
  /* [31][0][][] */ 3,121,-98,79,-126,85,-88,22,1,-59,34,-2,-87, 55,72,76,-90,-2,1,-45,-42,11,-76,127,-17,-3, 13,99,-56,-19,-76,-5,-77,40,3,-29,124,-23,48, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 32,1,3,13 } };
const TfArray<32, float> quant15_scale = { 32, { 0.0057293009012937546, 0.01577058807015419, 0.0050205332227051258, 0.0085462462157011032, 0.008370070718228817, 0.012008609250187874, 0.0095029324293136597, 0.0043434067629277706, 0.0068469992838799953, 0.012846089899539948, 0.0048758033663034439, 0.0068075098097324371, 0.012099476531147957, 0.011300213634967804, 0.010414884425699711, 0.0049252188764512539, 0.015103668905794621, 0.011566027067601681, 0.0052058110013604164, 0.0045579606667160988, 0.011608392000198364, 0.0077768713235855103, 0.008754250593483448, 0.0040838904678821564, 0.0055765258148312569, 0.0044986288994550705, 0.0054692784324288368, 0.010688301175832748, 0.0086937565356492996, 0.0036977608688175678, 0.011093541048467159, 0.0041369772516191006, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant14_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,13 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.05597272515296936, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,32 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,32 } };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,25,32 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.087427467107772827, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant17_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,13,1,16 } };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,13,16 } };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,13,8 } };
const TfArray<1, float> quant25_scale = { 1, { 0.070042237639427185, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant17_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,13,1,8 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,7,1,8 } };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,56 } };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,5 } };
const TfArray<1, float> quant29_scale = { 1, { 0.30036836862564087, } };
const TfArray<1, int> quant29_zero = { 1, { 58 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant17_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,15,14 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,2 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,3 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,13,12 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,4 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,5 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 24,11,10 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,6 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,7 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,9,8 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension17, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension19, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension21, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension23, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension24, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension25, 104, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension26, 104, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension27, 56, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 56, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension29, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension29, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[15] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[15] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 31, };
const size_t tflNodes_subgraph_index[] = {0, 15, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  30, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 31;
  for (size_t i = 0; i < 31; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 15; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
